<?xml version="1.0" encoding="UTF-8"?>
<Language>
  <LanguageName>ascii</LanguageName>
  <Lexer>
    <!-- Currently posix, re2, re2c or multi -->
    <!-- considering lex and the posix from musl -->
    <!-- Multi is set up to run all the engines that lexer.h says are available -->    
    <Engine value="posix" />
  </Lexer>


<!-- "posix" means ERE. Specifically it means passing REG_EXTENDED to the implementation
     in libc. This has consequences, such as hex escapes aren't available.
     Also \k is undefined unless k is a paren. In particular, it's not obvious that \t
     means tab, as opposed to undefined.
 -->


  <Tokens>
    <!-- Simpler than separate decimal/lower/upper tokens -->
    <Token name="Alphanumeric" regex="[0-9a-zA-Z]" />
    
    <!-- Other characters that only match themselves as far as ascii regex is concerned -->
    <Token name="OtherAscii" regex="[&quot;&apos;&amp;%_~!:,#/]" />

    <!-- Escaped characters like \n or \a work inside or outside of a character class in perl, seems reasonable -->
    <Token name="Escaped_a" literal="\a" />

    <!-- re2c hasn't implemented \e -->
    <Token name="Escaped_e" hexliteral="5c1b" />

    <!-- distinction between t & n is useful when checking codegen -->
    <Token name="Escaped_t" regex="[\t]" />
    <Token name="Escaped_n" literal="\n" />

    <!-- used \v while testing codegen -->
    <Token name="Escaped_v" hexliteral="5c76" />
    <!-- regex [\]r is rejected by re2c, looks like it treats the \ as escaping the close brace -->
    <Token name="Escaped_r" literal="\r" />
    <Token name="Escaped_f" literal="\f" />

    <!-- Alternative to handling \f etc one at a time. Requires a custom production but less xml -->
    <Token name="Escaped_character" regex="[\\][fnrtvae]" />

    <!-- Must be a slash, then x, then exactly two hex digits -->
    <!-- re2c does not cope with [\] for a slash but would accept [\\] -->
    <!-- re2c also rejected an x by itself in the middle of the ranges... -->
    <Token name="Escaped_hex" regex="[\x5c][x][0-9a-f][0-9a-f]" />

    <!-- The metacharacter that aren't special in a character class, i.e. not
         [\]^-
         Would like to use "[\\][()|*+?]" but haven't implemented it yet
         The following is matching \\ even without the \x5c, but shouldn't be
    -->

<!--
    <Token name="Escaped_meta" regex="[\x5c][\x28\x29\x7c\x2a\x2b\x3f\x5c]" />
-->

    <Token name="Space" regex="[ ]" />

    <!-- probably going to be literals
    <Token name="BYTE3a" literal=":" />
    <Token name="BYTE3b" literal=";" />
    <Token name="BYTE3c" literal="&lt;" />
    <Token name="BYTE3d" literal="=" />
    <Token name="BYTE3e" literal="&gt;" />
    -->

    <!--
    ? has its own behaviour
    <Token name="BYTE3f" literal="?" />
    -->

    <!-- probably a literal
    <Token name="BYTE40" literal="@" />
    -->

    <!-- uppercase -->

    <!-- todo
    <Token name="BYTE5b" literal="[" />
    <Token name="BYTE5c" literal="\\" />
    <Token name="BYTE5d" literal="]" />
    <Token name="BYTE5e" literal="^" />
    <Token name="BYTE5f" literal="_" />
    <Token name="BYTE60" literal="'" />
    -->

    <!-- lowercase -->

    <!-- syntax?
    <Token name="BYTE7b" literal="{{" />
    <Token name="BYTE7c" literal="|" />
    <Token name="BYTE7d" literal="}}" />
    <Token name="BYTE7e" literal="~" />
    -->

    <!-- These are better written as literals but that exposes the complexity
         of literal escapes which are difficult to get right across various engines
    -->
    
    <Token name="LPAREN" literal="(" />
    <Token name="RPAREN" literal=")" />

    <Token name="LSQUARE" literal="[" />
    <Token name="RSQUARE" literal="]" />

    <!-- open a negative set -->
    <Token name="LSQUARECARET" literal="[^" />

    <Token name="PERIOD" literal="." />
    <Token name="HYPHEN" literal="-" />

    <Token name="PIPE" literal="|" />
    <Token name="STAR" literal="*" />
    <Token name="PLUS" literal="+" />
    <Token name="QUESTION" literal="?" />

  <!-- Not sure this is doing the right thing, may be matching a \ then a t -->
  <!-- Should be trailing + but there is an interaction with longest-wins that is being debugged -->
  <Token name="DISCARDED_WHITESPACE" regex="[\f\n\r\t\v]" />


  </Tokens>

  <TokenDiscard>
    <Token name="DISCARDED_WHITESPACE" />
  </TokenDiscard>

  <Groupings>

    <!-- Going to roughly follow the NBF form proposed at
         https://www2.cs.sfu.ca/~cameron/Teaching/384/99-3/regexp-plg.html
    -->


    <Grouping name="result_RE" type="ptree" />
    <Grouping name="union_RE" type="ptree" />

    <Grouping name="simple_RE" type="ptree" />
    <Grouping name="concatenation" type="ptree" />
    <Grouping name="basic_RE" type="ptree" />
    <Grouping name="star" type="ptree" />
    <Grouping name="plus" type="ptree" />
    <Grouping name="question" type="ptree" />
    <Grouping name="elementary_RE" type="ptree" />

    <Grouping name="group" type="ptree" />

    <!-- Leaving $ / end of string out for now -->
    <!-- <Grouping name="eos" type="ptree" /> -->

    <Grouping name="char_RE" type="ptree" />

    <!-- probably excluding newline -->
    <Grouping name="any_RE" type="ptree" />

    <Grouping name="set" type="ptree" />
    <Grouping name="positive_set" type="ptree" />
    <Grouping name="negative_set" type="ptree" />

    <Grouping name="set_items" type="ptree" />
    <Grouping name="set_item" type="ptree" />

    <Grouping name="range" type="ptree" />

    <!-- exist only as transitionary nodes for the specific escapes-->
    <Grouping name="byte_07" type="ptree" />
    <Grouping name="byte_09" type="ptree" />
    <Grouping name="byte_0a" type="ptree" />
    <Grouping name="byte_0b" type="ptree" />
    <Grouping name="byte_0c" type="ptree" />
    <Grouping name="byte_0d" type="ptree" />
    <Grouping name="byte_1b" type="ptree" />
    <Grouping name="byte_20" type="ptree" />

    <!-- adding these as handling for special characters inside square brackets -->
    <Grouping name="byte_2a" type="ptree" />
    <Grouping name="byte_2b" type="ptree" />
    <Grouping name="byte_2e" type="ptree" />    
    <Grouping name="byte_28" type="ptree" />
    <Grouping name="byte_29" type="ptree" />
    <Grouping name="byte_7c" type="ptree" />    
  </Groupings>

  <Precedences>
<!--
    <Nonassoc>
      <Token name="WHITESPACE" />
    </Nonassoc>
-->
  </Precedences>

  <Productions>

    <AssignProduction label="result" grouping="program" >
      <Grouping type="result_RE" position="1" />
    </AssignProduction>

    <!-- result-RE -->
    <AssignProduction label="result_from_union" grouping="result_RE" >
      <Grouping type="union_RE" position="1" />
    </AssignProduction>
    <AssignProduction label="result_from_simple" grouping="result_RE" >
      <Grouping type="simple_RE" position="1" />
    </AssignProduction>

    <!-- union -->
    <CustomProduction label="union_ctor" grouping="union_RE" >
      <Grouping type="result_RE" />
      <Token name="PIPE" />
      <Grouping type="simple_RE" />
    </CustomProduction>

    <!-- simple-RE -->
    <AssignProduction label="simple_from_concat" grouping="simple_RE" >
      <Grouping type="concatenation" position="1" />
    </AssignProduction>
    <AssignProduction label="simple_from_basic" grouping="simple_RE" >
      <Grouping type="basic_RE" position="1" />
    </AssignProduction>

    <!-- concatenation -->
    <CustomProduction label="concat_ctor" grouping="concatenation" >
      <Grouping type="simple_RE" />
      <Grouping type="basic_RE" />
    </CustomProduction>

    <!-- basic-RE -->
    <AssignProduction label="basic_from_star" grouping="basic_RE" >
      <Grouping type="star" position="1" />  
    </AssignProduction>
    <AssignProduction label="basic_from_plus" grouping="basic_RE" >
      <Grouping type="plus" position="1" />  
    </AssignProduction>
    <AssignProduction label="basic_from_question" grouping="basic_RE" >
      <Grouping type="question" position="1" />  
    </AssignProduction>
    <AssignProduction label="basic_from_elementary" grouping="basic_RE" >
      <Grouping type="elementary_RE" position="1" />  
    </AssignProduction>

    <!-- star -->
    <CustomProduction label="star_ctor" grouping="star" >
      <Grouping type="elementary_RE" />
      <Token name="STAR" />
    </CustomProduction>

    <!-- plus -->
    <CustomProduction label="plus_ctor" grouping="plus" >
      <Grouping type="elementary_RE" />
      <Token name="PLUS" />
    </CustomProduction>

    <!-- question -->
    <CustomProduction label="question_ctor" grouping="question" >
      <Grouping type="elementary_RE" />
      <Token name="QUESTION" />
    </CustomProduction>

    <!-- elementary-RE -->
    <AssignProduction label="elementary_from_group" grouping="elementary_RE" >
      <Grouping type="group" position="1" />  
    </AssignProduction>

    <AssignProduction label="elementary_from_char" grouping="elementary_RE" >
      <Grouping type="char_RE" position="1" />  
    </AssignProduction>

    <AssignProduction label="elementary_from_any" grouping="elementary_RE" >
      <Grouping type="any_RE" position="1" />  
    </AssignProduction>

    <AssignProduction label="elementary_from_set" grouping="elementary_RE" >
      <Grouping type="set" position="1" />  
    </AssignProduction>

    <!-- group -->
    <AssignProduction label="group_ctor" grouping="group" >
      <Token name="LPAREN" />
      <Grouping type="result_RE" position="1" />
      <Token name="RPAREN" />
    </AssignProduction>

    <!-- any -->
    <CustomProduction label="from_any" grouping="any_RE" >
      <Token name="PERIOD"/>
    </CustomProduction>

    <!-- set -->
    <AssignProduction label="set_from_positive_set" grouping="set" >
      <Grouping type="positive_set" position="1" />
    </AssignProduction>

    <CustomProduction label="set_from_negative_set" grouping="set" >
      <Grouping type="negative_set" position="1" />
    </CustomProduction>

    <AssignProduction label="positive_set_ctor" grouping="positive_set" >
      <Token name="LSQUARE"/>
      <Grouping type="set_items" position="1" />
      <Token name="RSQUARE"/>
    </AssignProduction>

    <AssignProduction label="negative_set_ctor" grouping="negative_set" >
      <Token name="LSQUARECARET"/>
      <Grouping type="set_items" position="1" />
      <Token name="RSQUARE"/>
    </AssignProduction>

    <!-- set-items -->
    <AssignProduction label="set_item_single" grouping="set_items" >
      <Grouping type="set_item" position="1" />
    </AssignProduction>

    <CustomProduction label="set_item_multiple" grouping="set_items" >
      <Grouping type="set_item" />
      <Grouping type="set_items" />
    </CustomProduction>

    <!-- set-item -->
    <AssignProduction label="set_item_from_range" grouping="set_item" >
      <Grouping type="range" position="1" />
    </AssignProduction>

    <AssignProduction label="set_item_from_char" grouping="set_item" >
      <Grouping type="char_RE" position="1" />
    </AssignProduction>


    <!-- 
         Can put other things in [bracket expressions], such as ( or *
         Nervous about messing up the grammar with these so keeping them in a form
         lemon/bison can analyse, i.e. not in custom
    -->

    <AssignProduction label="set_item_from_byte_28" grouping="set_item" >
      <Grouping type="byte_28" position="1" />
    </AssignProduction>
    <ListProduction label="byte_28_from_lparen" grouping="byte_28" >
        <Token name="LPAREN" />
    </ListProduction>

    <AssignProduction label="set_item_from_byte_29" grouping="set_item" >
      <Grouping type="byte_29" position="1" />
    </AssignProduction>
    <ListProduction label="byte_29_from_rparen" grouping="byte_29" >
        <Token name="RPAREN" />
    </ListProduction>

    <AssignProduction label="set_item_from_byte_2a" grouping="set_item" >
      <Grouping type="byte_2a" position="1" />
    </AssignProduction>
    <ListProduction label="byte_2a_from_star" grouping="byte_2a" >
        <Token name="STAR" />
    </ListProduction>

    <AssignProduction label="set_item_from_byte_2b" grouping="set_item" >
      <Grouping type="byte_2b" position="1" />
    </AssignProduction>
    <ListProduction label="byte_2b_from_plus" grouping="byte_2b" >
        <Token name="PLUS" />
    </ListProduction>

    <AssignProduction label="set_item_from_byte_2e" grouping="set_item" >
      <Grouping type="byte_2e" position="1" />
    </AssignProduction>
    <ListProduction label="byte_2e_from_period" grouping="byte_2e" >
      <Token name="PERIOD" />
    </ListProduction>

    <AssignProduction label="set_item_from_byte_7c" grouping="set_item" >
      <Grouping type="byte_7c" position="1" />
    </AssignProduction>
    <ListProduction label="byte_7c_from_pipe" grouping="byte_7c" >
      <Token name="PIPE" />
    </ListProduction>


    <!-- range -->
    <CustomProduction label="range_ctor" grouping="range" >
      <Grouping type="char_RE" />
      <Token name="HYPHEN" />
      <Grouping type="char_RE" />
    </CustomProduction>

    <!-- char -->
    <CustomProduction label="from_alphanumeric" grouping="char_RE" >
      <Token name="Alphanumeric"/>
    </CustomProduction>

    <CustomProduction label="from_otherascii" grouping="char_RE" >
      <Token name="OtherAscii"/>
    </CustomProduction>

    <CustomProduction label="from_escaped_hex" grouping="char_RE" >
      <Token name="Escaped_hex" />
    </CustomProduction>

    <!-- Goes directly from token to char_RE by reading the value again -->
    <CustomProduction label="from_escaped_character" grouping="char_RE" >
      <Token name="Escaped_character" />
    </CustomProduction>

<!--
    <CustomProduction label="from_escaped_meta" grouping="char_RE" >
      <Token name="Escaped_meta" />
    </CustomProduction>
-->
    <ListProduction label="list_space" grouping="byte_20" >
        <Token name="Space" />
    </ListProduction>

    <!-- map escaped_k onto a specific byte -->
    <ListProduction label="list_escaped_a" grouping="byte_07" >
        <Token name="Escaped_a" />
    </ListProduction>
    <ListProduction label="list_escaped_t" grouping="byte_09" >
        <Token name="Escaped_t" />
    </ListProduction>
    <ListProduction label="list_escaped_n" grouping="byte_0a" >
        <Token name="Escaped_n" />
    </ListProduction>
    <ListProduction label="list_escaped_v" grouping="byte_0b" >
        <Token name="Escaped_v" />
    </ListProduction>
    <ListProduction label="list_escaped_f" grouping="byte_0c" >
        <Token name="Escaped_f" />
    </ListProduction>
    <ListProduction label="list_escaped_r" grouping="byte_0d" >
        <Token name="Escaped_r" />
    </ListProduction>
    <ListProduction label="list_escaped_e" grouping="byte_1b" >
        <Token name="Escaped_e" />
    </ListProduction>


    <!-- then map the specific byte onto a char_RE -->
    <AssignProduction label="byte_07" grouping="char_RE" >
      <Grouping type="byte_07" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_09" grouping="char_RE" >
      <Grouping type="byte_09" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0a" grouping="char_RE" >
      <Grouping type="byte_0a" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0b" grouping="char_RE" >
      <Grouping type="byte_0b" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0c" grouping="char_RE" >
      <Grouping type="byte_0c" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0d" grouping="char_RE" >
      <Grouping type="byte_0d" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_1b" grouping="char_RE" >
      <Grouping type="byte_1b" position="1" />
    </AssignProduction>

    <AssignProduction label="byte_20" grouping="char_RE" >
      <Grouping type="byte_20" position="1" />
    </AssignProduction>


  </Productions>
</Language>
