<?xml version="1.0" encoding="UTF-8"?>
<Language>
  <LanguageName>ascii</LanguageName>
  <Lexer>
    <!-- Currently posix, re2, re2c or multi -->
    <!-- considering lex and the posix from musl -->
    <!-- Multi is set up to run all the engines that lexer.h says are available -->    
    <Engine value="re2c" />
  </Lexer>

  <Tokens>

<!--
    Might use a token with a name and no regex/literal to indicate that the
    corresponding integer is reserved but no token will use it
-->

    <!-- Decimal numbers -->

    <Token name="Decimal" regex="[0-9]" />
    <Token name="Lowercase" regex="[a-z]" />
    <Token name="Uppercase" regex="[A-Z]" />


    <Token name="Escaped_a" literal="\\a" />
    <Token name="Escaped_e" literal="\\e" />

    <Token name="Escaped_t" literal="\\t" />
    <Token name="Escaped_n" literal="\\n" />
    <Token name="Escaped_v" literal="\\v" />
    <Token name="Escaped_f" literal="\\f" />
    <Token name="Escaped_r" literal="\\r" />

    <Token name="Space" literal=" " />


    <!-- probably going to be literals
    <Token name="BYTE3a" literal=":" />
    <Token name="BYTE3b" literal=";" />
    <Token name="BYTE3c" literal="&lt;" />
    <Token name="BYTE3d" literal="=" />
    <Token name="BYTE3e" literal="&gt;" />
    -->

    <!--
    ? has its own behaviour
    <Token name="BYTE3f" literal="?" />
    -->

    <!-- probably a literal
    <Token name="BYTE40" literal="@" />
    -->

    <!-- uppercase -->

    <!-- todo
    <Token name="BYTE5b" literal="[" />
    <Token name="BYTE5c" literal="\\" />
    <Token name="BYTE5d" literal="]" />
    <Token name="BYTE5e" literal="^" />
    <Token name="BYTE5f" literal="_" />
    <Token name="BYTE60" literal="'" />
    -->

    <!-- lowercase -->

    <!-- syntax?
    <Token name="BYTE7b" literal="{{" />
    <Token name="BYTE7c" literal="|" />
    <Token name="BYTE7d" literal="}}" />
    <Token name="BYTE7e" literal="~" />
    -->

    <Token name="LPAREN" literal="(" />
    <Token name="RPAREN" literal=")" />

    <Token name="LSQUARE" literal="[" />
    <Token name="RSQUARE" literal="]" />

    <!-- open a negative set -->
    <Token name="LSQUARECARET" literal="[^" />

    <Token name="PERIOD" literal="." />
    <Token name="HYPHEN" literal="-" />

    <Token name="PIPE" literal="|" />
    <Token name="STAR" literal="*" />
    <Token name="PLUS" literal="+" />

<!-- to be added later 
    <Token name="QUESTION" literal="?" />
-->


  </Tokens>

  <TokenDiscard>
  </TokenDiscard>

  <Groupings>

    <!-- Going to roughly follow the NBF form proposed at
         https://www2.cs.sfu.ca/~cameron/Teaching/384/99-3/regexp-plg.html
    -->


    <Grouping name="result_RE" type="ptree" />
    <Grouping name="union_RE" type="ptree" />

    <Grouping name="simple_RE" type="ptree" />
    <Grouping name="concatenation" type="ptree" />
    <Grouping name="basic_RE" type="ptree" />
    <Grouping name="star" type="ptree" />
    <Grouping name="plus" type="ptree" />
    <Grouping name="elementary_RE" type="ptree" />

    <Grouping name="group" type="ptree" />
    
    <!-- probably excluding newline -->
<!--
    <Grouping name="any" type="ptree" />
-->

    <!-- Leaving $ / end of string out for now -->
    <!-- <Grouping name="eos" type="ptree" /> -->

    <Grouping name="char_RE" type="ptree" />

    <Grouping name="set" type="ptree" />
    <Grouping name="positive_set" type="ptree" />
    <Grouping name="negative_set" type="ptree" />

    <Grouping name="set_items" type="ptree" />
    <Grouping name="set_item" type="ptree" />

    <Grouping name="range" type="ptree" />

    <Grouping name="byte_07" type="ptree" />

    <Grouping name="byte_09" type="ptree" />
    <Grouping name="byte_0a" type="ptree" />
    <Grouping name="byte_0b" type="ptree" />
    <Grouping name="byte_0c" type="ptree" />
    <Grouping name="byte_0d" type="ptree" />

    <Grouping name="byte_1b" type="ptree" />
    <Grouping name="byte_20" type="ptree" />

  </Groupings>

  <Precedences>
<!--
    <Nonassoc>
      <Token name="WHITESPACE" />
    </Nonassoc>
-->
  </Precedences>

  <Productions>

    <AssignProduction label="result" grouping="program" >
      <Grouping type="result_RE" position="1" />
    </AssignProduction>

    <!-- result-RE -->
    <AssignProduction label="result_from_union" grouping="result_RE" >
      <Grouping type="union_RE" position="1" />
    </AssignProduction>
    <AssignProduction label="result_from_simple" grouping="result_RE" >
      <Grouping type="simple_RE" position="1" />
    </AssignProduction>

    <!-- union -->
    <CustomProduction label="union_ctor" grouping="union_RE" >
      <Grouping type="result_RE" />
      <Token name="PIPE" />
      <Grouping type="simple_RE" />
    </CustomProduction>

    <!-- simple-RE -->
    <AssignProduction label="simple_from_concat" grouping="simple_RE" >
      <Grouping type="concatenation" position="1" />
    </AssignProduction>
    <AssignProduction label="simple_from_basic" grouping="simple_RE" >
      <Grouping type="basic_RE" position="1" />
    </AssignProduction>

    <!-- concatenation -->
    <CustomProduction label="concat_ctor" grouping="concatenation" >
      <Grouping type="simple_RE" />
      <Grouping type="basic_RE" />
    </CustomProduction>

    <!-- basic-RE -->
    <AssignProduction label="basic_from_star" grouping="basic_RE" >
      <Grouping type="star" position="1" />  
    </AssignProduction>
    <AssignProduction label="basic_from_plus" grouping="basic_RE" >
      <Grouping type="plus" position="1" />  
    </AssignProduction>
    <AssignProduction label="basic_from_elementary" grouping="basic_RE" >
      <Grouping type="elementary_RE" position="1" />  
    </AssignProduction>

    <!-- star -->
    <CustomProduction label="star_ctor" grouping="star" >
      <Grouping type="elementary_RE" />
      <Token name="STAR" />
    </CustomProduction>

    <!-- plus -->
    <CustomProduction label="plus_ctor" grouping="plus" >
      <Grouping type="elementary_RE" />
      <Token name="PLUS" />
    </CustomProduction>

    <!-- elementary-RE -->
    <AssignProduction label="elementary_from_group" grouping="elementary_RE" >
      <Grouping type="group" position="1" />  
    </AssignProduction>

    <AssignProduction label="elementary_from_char" grouping="elementary_RE" >
      <Grouping type="char_RE" position="1" />  
    </AssignProduction>

    <AssignProduction label="elementary_from_set" grouping="elementary_RE" >
      <Grouping type="set" position="1" />  
    </AssignProduction>

    <!-- group -->
    <AssignProduction label="group_ctor" grouping="group" >
      <Token name="LPAREN" />
      <Grouping type="result_RE" position="1" />
      <Token name="RPAREN" />
    </AssignProduction>

    <!-- set -->
    <AssignProduction label="set_from_positive_set" grouping="set" >
      <Grouping type="positive_set" position="1" />
    </AssignProduction>

    <CustomProduction label="set_from_negative_set" grouping="set" >
      <Grouping type="negative_set" position="1" />
    </CustomProduction>

    <AssignProduction label="positive_set_ctor" grouping="positive_set" >
      <Token name="LSQUARE"/>
      <Grouping type="set_items" position="1" />
      <Token name="RSQUARE"/>
    </AssignProduction>

    <AssignProduction label="negative_set_ctor" grouping="negative_set" >
      <Token name="LSQUARECARET"/>
      <Grouping type="set_items" position="1" />
      <Token name="RSQUARE"/>
    </AssignProduction>

    <!-- set-items -->
    <AssignProduction label="set_item_single" grouping="set_items" >
      <Grouping type="set_item" position="1" />
    </AssignProduction>

    <CustomProduction label="set_item_multiple" grouping="set_items" >
      <Grouping type="set_item" />
      <Grouping type="set_items" />
    </CustomProduction>

    <!-- set-item -->
    <AssignProduction label="set_item_from_range" grouping="set_item" >
      <Grouping type="range" position="1" />
    </AssignProduction>

    <AssignProduction label="set_item_from_char" grouping="set_item" >
      <Grouping type="char_RE" position="1" />
    </AssignProduction>

    <!-- range -->
    <CustomProduction label="range_ctor" grouping="range" >
      <Grouping type="char_RE" />
      <Token name="HYPHEN" />
      <Grouping type="char_RE" />
    </CustomProduction>

    <!-- char -->
    <CustomProduction label="from_decimal" grouping="char_RE" >
      <Token name="Decimal"/>
    </CustomProduction>

    <CustomProduction label="from_lowercase" grouping="char_RE" >
      <Token name="Lowercase"/>
    </CustomProduction>

    <CustomProduction label="from_uppercase" grouping="char_RE" >
      <Token name="Uppercase"/>
    </CustomProduction>

    <ListProduction label="list_space" grouping="byte_20" >
        <Token name="Space" />
    </ListProduction>

    <ListProduction label="list_escaped_a" grouping="byte_07" >
        <Token name="Escaped_a" />
    </ListProduction>

    <ListProduction label="list_escaped_t" grouping="byte_09" >
        <Token name="Escaped_t" />
    </ListProduction>
    <ListProduction label="list_escaped_n" grouping="byte_0a" >
        <Token name="Escaped_n" />
    </ListProduction>
    <ListProduction label="list_escaped_v" grouping="byte_0b" >
        <Token name="Escaped_v" />
    </ListProduction>
    <ListProduction label="list_escaped_f" grouping="byte_0c" >
        <Token name="Escaped_f" />
    </ListProduction>
    <ListProduction label="list_escaped_r" grouping="byte_0d" >
        <Token name="Escaped_r" />
    </ListProduction>

    <ListProduction label="list_escaped_e" grouping="byte_1b" >
        <Token name="Escaped_e" />
    </ListProduction>


    <!-- May want all 256 bytes mappd to char here, migth get away with only the special cases -->
    <AssignProduction label="byte_07" grouping="char_RE" >
      <Grouping type="byte_07" position="1" />
    </AssignProduction>

    <AssignProduction label="byte_09" grouping="char_RE" >
      <Grouping type="byte_09" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0a" grouping="char_RE" >
      <Grouping type="byte_0a" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0b" grouping="char_RE" >
      <Grouping type="byte_0b" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0c" grouping="char_RE" >
      <Grouping type="byte_0c" position="1" />
    </AssignProduction>
    <AssignProduction label="byte_0d" grouping="char_RE" >
      <Grouping type="byte_0d" position="1" />
    </AssignProduction>

    <AssignProduction label="byte_1b" grouping="char_RE" >
      <Grouping type="byte_1b" position="1" />
    </AssignProduction>

    <AssignProduction label="byte_20" grouping="char_RE" >
      <Grouping type="byte_20" position="1" />
    </AssignProduction>


  </Productions>
</Language>
